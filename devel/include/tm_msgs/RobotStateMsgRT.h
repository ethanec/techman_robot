// Generated by gencpp from file tm_msgs/RobotStateMsgRT.msg
// DO NOT EDIT!


#ifndef TM_MSGS_MESSAGE_ROBOTSTATEMSGRT_H
#define TM_MSGS_MESSAGE_ROBOTSTATEMSGRT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tm_msgs
{
template <class ContainerAllocator>
struct RobotStateMsgRT_
{
  typedef RobotStateMsgRT_<ContainerAllocator> Type;

  RobotStateMsgRT_()
    : header()
    , time(0.0)
    , controller_time(0.0)
    , q_command()
    , qd_command()
    , qt_command()
    , q_actual()
    , qd_actual()
    , qt_actual()
    , tool0_pos_command()
    , tool0_pos_actual()
    , tool_pos_command()
    , tool_pos_actual()
    , tcp_speed()
    , tcp_force()
    , kine_config()
    , common_speed_ratio(0.0)
    , robot_mode(0)
    , safety_mode(0)
    , teach_mode(0)
    , control_mode(0)
    , error_code_0(0)
    , error_code_1(0)  {
    }
  RobotStateMsgRT_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , time(0.0)
    , controller_time(0.0)
    , q_command(_alloc)
    , qd_command(_alloc)
    , qt_command(_alloc)
    , q_actual(_alloc)
    , qd_actual(_alloc)
    , qt_actual(_alloc)
    , tool0_pos_command(_alloc)
    , tool0_pos_actual(_alloc)
    , tool_pos_command(_alloc)
    , tool_pos_actual(_alloc)
    , tcp_speed(_alloc)
    , tcp_force(_alloc)
    , kine_config(_alloc)
    , common_speed_ratio(0.0)
    , robot_mode(0)
    , safety_mode(0)
    , teach_mode(0)
    , control_mode(0)
    , error_code_0(0)
    , error_code_1(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _time_type;
  _time_type time;

   typedef double _controller_time_type;
  _controller_time_type controller_time;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _q_command_type;
  _q_command_type q_command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qd_command_type;
  _qd_command_type qd_command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qt_command_type;
  _qt_command_type qt_command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _q_actual_type;
  _q_actual_type q_actual;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qd_actual_type;
  _qd_actual_type qd_actual;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qt_actual_type;
  _qt_actual_type qt_actual;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool0_pos_command_type;
  _tool0_pos_command_type tool0_pos_command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool0_pos_actual_type;
  _tool0_pos_actual_type tool0_pos_actual;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_pos_command_type;
  _tool_pos_command_type tool_pos_command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_pos_actual_type;
  _tool_pos_actual_type tool_pos_actual;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tcp_speed_type;
  _tcp_speed_type tcp_speed;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tcp_force_type;
  _tcp_force_type tcp_force;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _kine_config_type;
  _kine_config_type kine_config;

   typedef double _common_speed_ratio_type;
  _common_speed_ratio_type common_speed_ratio;

   typedef int32_t _robot_mode_type;
  _robot_mode_type robot_mode;

   typedef int32_t _safety_mode_type;
  _safety_mode_type safety_mode;

   typedef int32_t _teach_mode_type;
  _teach_mode_type teach_mode;

   typedef int32_t _control_mode_type;
  _control_mode_type control_mode;

   typedef int32_t _error_code_0_type;
  _error_code_0_type error_code_0;

   typedef int32_t _error_code_1_type;
  _error_code_1_type error_code_1;





  typedef boost::shared_ptr< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStateMsgRT_

typedef ::tm_msgs::RobotStateMsgRT_<std::allocator<void> > RobotStateMsgRT;

typedef boost::shared_ptr< ::tm_msgs::RobotStateMsgRT > RobotStateMsgRTPtr;
typedef boost::shared_ptr< ::tm_msgs::RobotStateMsgRT const> RobotStateMsgRTConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'tm_msgs': ['/home/yc/catkin_ws/src/techman_robot/tm_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b44d2ec991068109b7dfd7a73666f138";
  }

  static const char* value(const ::tm_msgs::RobotStateMsgRT_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb44d2ec991068109ULL;
  static const uint64_t static_value2 = 0xb7dfd7a73666f138ULL;
};

template<class ContainerAllocator>
struct DataType< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tm_msgs/RobotStateMsgRT";
  }

  static const char* value(const ::tm_msgs::RobotStateMsgRT_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Data structure for the realtime communications interface\n\
# used by the Techman Robot controller\n\
# \n\
# This data structure is send at 100 Hz on TCP port 6188\n\
\n\
Header header\n\
float64 time\n\
float64 controller_time\n\
float64[] q_command\n\
float64[] qd_command\n\
float64[] qt_command\n\
float64[] q_actual\n\
float64[] qd_actual\n\
float64[] qt_actual\n\
float64[] tool0_pos_command\n\
float64[] tool0_pos_actual\n\
float64[] tool_pos_command\n\
float64[] tool_pos_actual\n\
float64[] tcp_speed\n\
float64[] tcp_force\n\
int32[] kine_config\n\
float64 common_speed_ratio\n\
int32 robot_mode\n\
int32 safety_mode\n\
int32 teach_mode\n\
int32 control_mode\n\
int32 error_code_0\n\
int32 error_code_1\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::tm_msgs::RobotStateMsgRT_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.time);
      stream.next(m.controller_time);
      stream.next(m.q_command);
      stream.next(m.qd_command);
      stream.next(m.qt_command);
      stream.next(m.q_actual);
      stream.next(m.qd_actual);
      stream.next(m.qt_actual);
      stream.next(m.tool0_pos_command);
      stream.next(m.tool0_pos_actual);
      stream.next(m.tool_pos_command);
      stream.next(m.tool_pos_actual);
      stream.next(m.tcp_speed);
      stream.next(m.tcp_force);
      stream.next(m.kine_config);
      stream.next(m.common_speed_ratio);
      stream.next(m.robot_mode);
      stream.next(m.safety_mode);
      stream.next(m.teach_mode);
      stream.next(m.control_mode);
      stream.next(m.error_code_0);
      stream.next(m.error_code_1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStateMsgRT_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tm_msgs::RobotStateMsgRT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tm_msgs::RobotStateMsgRT_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "controller_time: ";
    Printer<double>::stream(s, indent + "  ", v.controller_time);
    s << indent << "q_command[]" << std::endl;
    for (size_t i = 0; i < v.q_command.size(); ++i)
    {
      s << indent << "  q_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_command[i]);
    }
    s << indent << "qd_command[]" << std::endl;
    for (size_t i = 0; i < v.qd_command.size(); ++i)
    {
      s << indent << "  qd_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qd_command[i]);
    }
    s << indent << "qt_command[]" << std::endl;
    for (size_t i = 0; i < v.qt_command.size(); ++i)
    {
      s << indent << "  qt_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qt_command[i]);
    }
    s << indent << "q_actual[]" << std::endl;
    for (size_t i = 0; i < v.q_actual.size(); ++i)
    {
      s << indent << "  q_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_actual[i]);
    }
    s << indent << "qd_actual[]" << std::endl;
    for (size_t i = 0; i < v.qd_actual.size(); ++i)
    {
      s << indent << "  qd_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qd_actual[i]);
    }
    s << indent << "qt_actual[]" << std::endl;
    for (size_t i = 0; i < v.qt_actual.size(); ++i)
    {
      s << indent << "  qt_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.qt_actual[i]);
    }
    s << indent << "tool0_pos_command[]" << std::endl;
    for (size_t i = 0; i < v.tool0_pos_command.size(); ++i)
    {
      s << indent << "  tool0_pos_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool0_pos_command[i]);
    }
    s << indent << "tool0_pos_actual[]" << std::endl;
    for (size_t i = 0; i < v.tool0_pos_actual.size(); ++i)
    {
      s << indent << "  tool0_pos_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool0_pos_actual[i]);
    }
    s << indent << "tool_pos_command[]" << std::endl;
    for (size_t i = 0; i < v.tool_pos_command.size(); ++i)
    {
      s << indent << "  tool_pos_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_pos_command[i]);
    }
    s << indent << "tool_pos_actual[]" << std::endl;
    for (size_t i = 0; i < v.tool_pos_actual.size(); ++i)
    {
      s << indent << "  tool_pos_actual[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_pos_actual[i]);
    }
    s << indent << "tcp_speed[]" << std::endl;
    for (size_t i = 0; i < v.tcp_speed.size(); ++i)
    {
      s << indent << "  tcp_speed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tcp_speed[i]);
    }
    s << indent << "tcp_force[]" << std::endl;
    for (size_t i = 0; i < v.tcp_force.size(); ++i)
    {
      s << indent << "  tcp_force[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tcp_force[i]);
    }
    s << indent << "kine_config[]" << std::endl;
    for (size_t i = 0; i < v.kine_config.size(); ++i)
    {
      s << indent << "  kine_config[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.kine_config[i]);
    }
    s << indent << "common_speed_ratio: ";
    Printer<double>::stream(s, indent + "  ", v.common_speed_ratio);
    s << indent << "robot_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_mode);
    s << indent << "safety_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.safety_mode);
    s << indent << "teach_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.teach_mode);
    s << indent << "control_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "error_code_0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code_0);
    s << indent << "error_code_1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code_1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TM_MSGS_MESSAGE_ROBOTSTATEMSGRT_H
