// Generated by gencpp from file tm_msgs/SetIORequest.msg
// DO NOT EDIT!


#ifndef TM_MSGS_MESSAGE_SETIOREQUEST_H
#define TM_MSGS_MESSAGE_SETIOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tm_msgs
{
template <class ContainerAllocator>
struct SetIORequest_
{
  typedef SetIORequest_<ContainerAllocator> Type;

  SetIORequest_()
    : fun(0)
    , ch(0)
    , value(0.0)  {
    }
  SetIORequest_(const ContainerAllocator& _alloc)
    : fun(0)
    , ch(0)
    , value(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _fun_type;
  _fun_type fun;

   typedef int8_t _ch_type;
  _ch_type ch;

   typedef float _value_type;
  _value_type value;



  enum {
    FUN_SET_MB_DIGITAL_OUT = 1,
    FUN_SET_MB_ANALOG_OUT = 2,
    FUN_SET_EE_DIGITAL_OUT = 3,
    FUN_SET_EE_ANALOG_OUT = 4,
  };


  typedef boost::shared_ptr< ::tm_msgs::SetIORequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tm_msgs::SetIORequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetIORequest_

typedef ::tm_msgs::SetIORequest_<std::allocator<void> > SetIORequest;

typedef boost::shared_ptr< ::tm_msgs::SetIORequest > SetIORequestPtr;
typedef boost::shared_ptr< ::tm_msgs::SetIORequest const> SetIORequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tm_msgs::SetIORequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tm_msgs::SetIORequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'tm_msgs': ['/home/yc/catkin_ws/src/techman_robot/tm_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::SetIORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tm_msgs::SetIORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::SetIORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tm_msgs::SetIORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::SetIORequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tm_msgs::SetIORequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tm_msgs::SetIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ba9b06479f48a80313812c352c3f674";
  }

  static const char* value(const ::tm_msgs::SetIORequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ba9b06479f48a80ULL;
  static const uint64_t static_value2 = 0x313812c352c3f674ULL;
};

template<class ContainerAllocator>
struct DataType< ::tm_msgs::SetIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tm_msgs/SetIORequest";
  }

  static const char* value(const ::tm_msgs::SetIORequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tm_msgs::SetIORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 FUN_SET_MB_DIGITAL_OUT = 1\n\
int8 FUN_SET_MB_ANALOG_OUT = 2\n\
int8 FUN_SET_EE_DIGITAL_OUT = 3\n\
int8 FUN_SET_EE_ANALOG_OUT = 4\n\
int8 fun\n\
int8 ch\n\
float32 value\n\
";
  }

  static const char* value(const ::tm_msgs::SetIORequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tm_msgs::SetIORequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fun);
      stream.next(m.ch);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetIORequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tm_msgs::SetIORequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tm_msgs::SetIORequest_<ContainerAllocator>& v)
  {
    s << indent << "fun: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fun);
    s << indent << "ch: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ch);
    s << indent << "value: ";
    Printer<float>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TM_MSGS_MESSAGE_SETIOREQUEST_H
